# This is a basic workflow to help you get started with Actions

name: Get xManager Link

# Controls when the workflow will run
on:
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

  schedule:
    - cron: "0 12 * * *"

permissions:
  contents: write

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true
    
      # Runs a single command using the runners shell
      - name: Download xManager
        run: wget https://github.com/Team-xManager/xManager/releases/download/latest/xManager.apk

      # Runs a set of commands using the runners shell
      - name: Extract link
        id: extract-link
        run: |
          unzip xManager.apk "resources.arsc"
          LINKS=$(grep -a "githubusercontent.com" resources.arsc | iconv -c -f UTF8 -t ascii//TRANSLIT | sed -rn 's/.*(https:\/\/gist\.githubusercontent\.com\/.*\/.*\/raw).*/\1/p')
          STOCK_VERSION=$(curl -s $LINKS | jq -r '.Stock_Patched[-1].Title')
          echo "version=$STOCK_VERSION" >> "$GITHUB_OUTPUT"
          echo "lastPublishedVersion=$(git describe --tags `git rev-list --tags --max-count=1`)" >> "$GITHUB_OUTPUT"

          curl -s $LINKS | jq -r ".Patched_Changelogs[-1].Patched_Changelogs" | sed 2d | (echo -n "> " && cat) > ${{ github.workspace }}-changelog.txt
          
          curl -s $LINKS | jq -r ".Stock_Patched[-1].Mirror" | (echo -ne "\nStock Patched ($STOCK_VERSION) " && cat) >> ${{ github.workspace }}-changelog.txt

          AMOLED_VERSION=$(curl -s $LINKS | jq -r '.Amoled_Patched[-1].Title')
          curl -s $LINKS | jq -r ".Amoled_Patched[-1].Mirror" | (echo -n "Amoled Patched ($AMOLED_VERSION) " && cat) >> ${{ github.workspace }}-changelog.txt

          STOCK_CLONED_VERSION=$(curl -s $LINKS | jq -r '.Amoled_Patched[-1].Title')
          curl -s $LINKS | jq -r ".Stock_Cloned_Patched[-1].Mirror" | (echo -n "Stocked Cloned Patched ($STOCK_CLONED_VERSION) " && cat) >> ${{ github.workspace }}-changelog.txt

          AMOLED_CLONED_VERSION=$(curl -s $LINKS | jq -r '.Amoled_Patched[-1].Title')
          curl -s $LINKS | jq -r ".Amoled_Cloned_Patched[-1].Mirror" | (echo -n "Amoled Cloned Patched ($STOCK_CLONED_VERSION) " && cat) >> ${{ github.workspace }}-changelog.txt
          
      - name: Publish release
        uses: softprops/action-gh-release@v2
        if: ${{ steps.extract-link.outputs.lastPublishedVersion != steps.extract-link.outputs.version }}
        with:
          body_path: ${{ github.workspace }}-changelog.txt
          tag_name: ${{ steps.extract-link.outputs.version }}
          # repository: my_gh_org/my_gh_repo
          # note you'll typically need to create a personal access token
          # with permissions to create releases in the other repo
          # token: ${{ secrets.CUSTOM_GITHUB_TOKEN }}

          
          
